1.Android 类的加载器 : apk内部是dex文件,dex文件是对class的重新打包而并不是简单的压缩,是对class的各种函数表和变量表进行优化产生的新文件,使用DexClassLoader进行加载

2.Handler机制
   其实就是Handler,Looper,Message,MessageQueue之间的合作
   Handler 负责发送消息和创建Looper
    在new Handler()的时候,就会初始化Looper(),所以在分线程用Handler的时候要手动的创建Looper,然后Handler通过send方法发送消息到MessageQueue中(post方法其实也是被
封装成了Message发送了出去)
    Looper主要就是prepare()和loop()方法
        prepare()方法用来保证一个线程只能存在一个Looper和实例化Looper
        loop()其实是一个死循环,循环从MessageQueue中获取消息,当没有消息的时候阻塞,当有消息的时候去除消息,调用handler的dispatchMessage()
        因为Looper是在创建Handler的时候创建的,所以调用loop来获取的消息,有消息之后调用了Handler的dispatchMessage-->handleMessage()来处理消息实现了线程的切换
3.view的绘制流程
    onMeasure():测量视图的大小
    onLayout():确定view的位置,进行页面布局
    onDraw():绘制

4.Android事件分发处理机制
    以一个简单的button为例(Activity中包含一个ViewGroup,ViewGroup中包含一个Button)
    当touch或者click事件发生在了button的view上的时候,activity首先收到这个事件(事件相关的信息会被封装成MotiveEvent传递过来)
    Activity:首先调用dispatchTouchEvent()来对事件进行分发,如果ViewGroup和View都没有消费事件,那么最终的事件将有Activity消费
    ViewGroup:当ViewGroup()收到这个事件的时候也会调用dispatchTouchEvent()来进行事件的分发,在分发的过程中会首先调用ViewGroup的onInterceptTouchEvent()来判断是否拦截事件
当拦截事件的时候,也就代表事件在此ViewGroup被消费,则不会继续向下传递,会导致view收不到此次的事件;而当不拦截事件的时候会继续向下传递到View的dispatchTouchEvent(),如果ViewGroup中
的view没有消费事件,那么事件在下层转了一圈之后还会回到ViewGroup中的onTouchEvent()方法来进行处理
    View:事件传递到此,也依然会调用dispatchTouchEvent()来对事件进行分发,在dispatchTouchEvent()方法中,会首先调用mOnTouchListener.onTouch()方法(也就是我们通常设置的
view.setOnTouchListener()中重写的onTouch()方法)如果onTouch返回true消费了事件,则事件到此停止,不在继续处理,否则若返回了false,则事件继续,然后会执行onTouchEvent()方法,而在
onTouchEvent()方法的up事件中执行了onClick()方法,
5.Binder机制
    Binder机制主要涉及三个东西：(可见图：drawable-->binder.png)Client Server ServiceManager
    其中Client和Server是相对的，谁发消息谁就是Client，当Client需要调用Server中的方法的时候，会向ServiceManager发起请求
而Server会事先在ServiceManager中进行注册，当ServiceManager收到Client的请求的时候，并不会直接把Server的对象给到Client
而是把给了Client一个代理对象（Proxy），Client会调用Proxy的对应方法，而Proxy会去调用Server的对应发法，并且拿到返回结果给到Client
6.android 中的进程
    前台进程   可见进程   服务进程   后台进程  空进程
7.内存泄漏，内存溢出及内存泄漏产生的原因
    内存泄漏：内存空间在使用后没有及时释放，gc无法对其进行回收
    内存溢出：内存不够用导致的程序崩溃，内存泄漏到一定程度会导致内存溢出

    Android 常见内存泄漏：
        1.static 性质的activity引用，没有及时的释放导致
        2.活在Activity生命周期意外的线程持有activity的引用导致
        3.资源对象没有关闭导致（例如Cursor等）
        4.构造Adapter的时候没有使用convertView来缓存view导致
        ...
8.图片占用的内存大小和图片在磁盘上占用的大小一样吗，怎么计算一张图片的占用的内存大小？
    两者本质上不是一个概念，只不过是单位一样而已，不能弄混淆，磁盘只是在磁盘上的占用大小，内存大小指的是把这张图片加载到内存以后占用的内存空间

    计算图片占用的内存大小：width*height*一个像素占用的内存大小  实际中会跟图片的存放位置也有关系在xhdpi和xxhdpi占用的内存大小是不一样的，android会对图片进行缩放
    例如：一个width：800，height:600,大小为100k的图片，占用的内存大小（这里假设不会进行缩放）：800*600*4byte=1875kb=1.83M
9.加载Bitmap怎么避免内存溢出
    采用更加节省内存的编码：isPreferredConfig（例如将默认的ARGB_8888改为RGB_565可节约一般的内存），
    降低图片的分辨率：inSampleSize（例如将inSampleSize=2;会将图片的宽和高缩小一半,结果将是实际占用的内存大小会缩小4倍）
    不将图片加载到内存中（用在只需要获取图片信息而不需要显示的情况下）：inJustDecodeBounds 设置为true
10.LRUCache算法是怎么样实现的
    LRUCache内部采用LinkHashMap和一个maxSize来结合实现，LinkHashMap除了要做HashMap的事情，还维护来一个LRU的顺序，当
每次get对象的时候会将该对象移到链表的尾部，同样put新对象的时候也放到链表的尾部（在put的时候会计算所有缓存图片的总大小，小于
maxSize则put，若大于maxSize会先将最久添加的图片移除再put），因此在移除的时候只需要将头部的（近期最少使用的）移除即可


