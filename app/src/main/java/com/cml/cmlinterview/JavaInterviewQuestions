1.类的加载过程,以Person person = new Person()为例
     找到Person.java加载到内存中
     执行static的代码部分
     为Person分配内存空间
     加载Person中的特有属性并进行默认的初始化
     对Person中的特有属性进行显示初始化
     执行Person中的代码块部分
     执行Person对应的构造器
     将person的对象引用保存到栈空间中

 2.JVM相关知识
    图示:res-->drawable-->pic_jvm.png
    由图可见 JVM 主要包含四个部分:
        类加载器(ClassLoader):在jvm运行或者加载类的时候将类加载到内存区域,详细过程可见res-->drawable-->pic_class_loader.png图示
        内存区 : 分为以下五部分
            方法区(Method Area) : 别名: 非堆(non-heap) 用来存储类的结构信息,例如:常量池,静态变量,构造器...方法区里还包含一个运行时常量池,被所有线程共享
            虚拟机栈(VM Stack) : java栈与线程关联,主要用于存储局部变量,对象的引用....
            本地方法栈(Native Method Stack) : 与java栈差不多,是服务于native方法
            堆(Heap) : 用来存储java对象,也是gc的主要区域,被所有线程共享
            程序计数器(Program Counter Register) : 保存当前线程执行的内存地址.多线程执行中,由于可能发生中断去执行别的线程,所以用来记录当前的执行位置,便于恢复执行
        执行引擎 : 执行字节码文件的代码指令
        本地库接口 : 调用C或者C++方法和返回结果
 3.GC机制
    垃圾回收主要分为两个部分:垃圾收集,垃圾清理
    垃圾收集算法:
        1.引用计数法:对象的引用,每增加一个使用它的地方就++,失效就--.所以为0的时候就代表可以被回收了
        2.可达性算法:从根集(一般包括栈中引用的对象,方法区常量池中引用的对象)开始遍历,如果有对象不可达就代表可以被回收
    垃圾回收算法: 详细图示 res-->drawable-->pic_generational_collection_algorithm.png
        1.标记-清除(Mark-Sweep): 标记所有需要回收的对象,然后统一进行清除(基础算法,效率低,会产生大量的碎片)  详见图示:res-->drawable-->pic_mark_sweep.png
        2.复制(Copying) : 把内存区域分为两份(暂起名1号和2号区域),只用1号,待gc工作的时候,把1号中所有非垃圾对象复制到2号区域并进行整理,然后把1号区域进行清理,以此类推(不会出现碎片问题,但是需要2倍的内存空间) 详见图示:res-->drawable-->pic_copying.png
        3.标记-整理(Mark-Compact) : 该算法结合了标记-清除算法和复制算法两者的优点,具体就是对所有待回收的垃圾对象进行标记,然后把未被标记的对象压缩到堆的另一处区域并进行整理(避免了碎片和需要2倍内存空间的问题) 详见图示:res-->drawable-->pic_mark_compact.png
        4.分代收集算法:其实并没有产生新的算法,只是在不同的时期使用了标记-清除,复制和标记-整理算法,按照对象的生命周期进行划分了三个阶段
            年轻代 : 分为了Enden,Survivor1和Survivor2三个区域,新生对象产生在Enden区域,当Enden区域填满的时候触发gc,
                  将存活下来的对象放到Survivor1或者Survivor2区域中,同时也会检查Survivor中存活的对象进行复制并且总会保证一个空的Survivor区域,
                  当执行n次(根据年龄阙值来定)gc后依然存活的对象会被保存到年老代中
            年老代 : 通常会在此区域被占满的时候触发Full GC,回收整个堆内存
            持久代 : 用于存放静态文件,例如:java类,方法....
 4.类的加载机制
    类的加载并不是一次性加载所有的类而是动态的,也就是在需要的时候才会通过ClassLoader将类加载进内存,这里的加载机制是双亲机制
    类的加载器:最顶层依次往下分别是BootstrapClassLoader,ExtensionClassLoader,AppClassLoader
        Bootstrap ClassLoader(启动类加载器):是java最顶层的加载器(使用的是非java代码实现的用的是C++,所以在java中获取的时候会返回null),随着jvm的启动就加载了
        Extension ClassLoader(标准扩展类加载器):负责加载<JAVA_HOME>/lib/ext或者java.ext.dir路径上指定的类库到内存中
        Application ClassLoader:负责加载用户类路径上指定的库到内存中
    双亲机制:当一个类需要被加载的时候,加载器会优先把此任务给到父类加载器来实现,如果父类都没有加载才会尝试自己加载,成功则返回,否则抛出ClassNotFoundException,这样的好处就是避免了类的重复加载
            例如:当要用到String的时候,AppClassLoader将任务交给ExtClassLoader,而ExtClassLoader又会将任务交给BootstrapClassLoader发现String类已经被加载过了,就将其返回
 5.能否自己写一个类命名java.lang.String或者java.lang.System?
    亲自试验结果:可以这样写,但是在其余的地方引用的使用,会引用不到,因为得到的总是java自己提供的String或者System.具体原理:因为双亲加载机制的原因,自己写的类并不会被加载到,因此无法使用

 6.集合框架
    Collection
        List : 元素有序,可重复
            ArrayList : 内部采用的是数组(一整块连续的内存)实现,Object[] ,当容量不足的时候会按照1.5倍的容量进行增长,查询速度快,增删效率低
            LinkedList : 内部采用的是链表实现,内存地址不连续,查询速度慢,增删效率高
        Set : 元素无序,不重复
            HashSet : 内部采用的HashMap来实现,其中用Map的key来保存元素,Map的Value统一固定,因为key不能重复所以,元素不可重复
            TreeSet : 内部采用TreeMap来实现
        Vector (线程安全):  类似于ArrayList ,内部也是采用数组的方式实现,扩容方式:当前容量的两倍和当前容量+扩容因子(可自定义)两者之间取大者,因是线程安全所以效率不如ArrayList
    Map
        HashMap : 内部是数组结构,数组的每一项又是一个链表,允许null键和null值,其中null键只能存在一个,null值可存在多个.内部是键值对的形式保存在Entry中,其中key必须实现hashcode()和equals()方法(因为在put元素的时候首先通过hashcode()计算要存储的下标的位置,
                    然后遍历该下标下存储的元素,通过equals()对比,相同则进行替换Value,不同则通过链的形式保存在此位置下)
            LinkedHashMap : 继承自HashMap,存在了一个双向循环链表,保证了迭代顺序(也就是元素的放入顺序)
        TreeMap :内部采用红黑树实现,key是有序存在的
        Hashtable (线程安全):不可使用null键和null值
        ConcurrentHashMap(线程安全) : 是支持高并发和高吞吐量的HashMap
